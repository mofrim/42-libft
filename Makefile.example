# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile.example                                   :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: fmaurer <fmaurer42@posteo.de>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/18 11:37:05 by fmaurer           #+#    #+#              #
#    Updated: 2024/10/16 20:28:35 by fmaurer          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME	=	test

CC			= cc

CFLAGS	= -Wall -Wextra -Werror

# we are building a library which might even end up being a shared lib. so
# generating "Position Independent Code" seems like a good idea.
# additionally printf-unit-test needs this. some literature:
# https://stackoverflow.com/questions/5311515/gcc-fpic-option
PIC	=	-fPIC

LIBFT_PATH	= ./libft
LIBFT				= $(LIBFT_PATH)/libft.a
LIB_PATHS		+= -L$(LIBFT_PATH)
LIBS				+= -lft

SRC = test.c

# Makefile ricing :)
GRN = \033[1;32m
RED = \033[1;31m
WHT = \033[1;37m
EOC = \033[1;0m
YLW = \033[1;33m
MSGOPN = $(YLW)[[$(GRN)
MSGEND = $(YLW)]]$(EOC)
log_msg = $(MSGOPN) $(1) $(MSGEND)

all: $(NAME)

$(NAME): $(SRC) | $(LIBFT)
	cc -o $(NAME) $< $(LIBS)

$(LIBFT):
	@echo -e "$(call log_msg,Compiling libft...)"
	make -C $(LIBFT_PATH) all

clean: 
	@echo -e "$(call log_msg,Removing libft objs.)"
	@make -s -C $(LIBFT_PATH) clean

fclean:
	@echo -e "$(call log_msg,fcleaning libft.)"
	@make -s -C $(LIBFT_PATH) fclean

re: fclean all

.PHONY: all clean fclean re
